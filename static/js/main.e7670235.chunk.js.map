{"version":3,"sources":["components/inputPrompt.js","components/zeigerdiagramm.js","components/spannung-zeitdiagramm.js","App.js","reportWebVitals.js","index.js"],"names":["InputPrompt","props","useState","real","undefined","imaginary","frequency","state","setState","className","type","placeholder","onChange","e","prev","target","value","onClick","console","log","dispatch","ACTIONS","SET_FREQUENCY","payload","ADD_ZEIGER","Zeigerdiagramm","maxBetrag","d3","store","zeigerarray","zeiger","betrag","scaleReal","domain","range","scaleImaginary","realAxis","scale","imaginaryAxis","svg","useRef","useEffect","remove","append","attr","call","style","width","height","map","index","color","motion","div","initial","rotate","animate","angle","top","left","backgroundColor","transformOrigin","borderTop","borderBottom","borderLeft","transform","nummer","id","ref","SpannungZeitdiagramm","scaleSpannung","spannungAxis","scaleTime","timeAxis","sine","t","Math","sin","PI","line","context","x","d","y","svgWidth","palette","distinctColors","count","RESET","App","useReducer","action","zeigernummer","d3max","isNaN","sqrt","atan","hex","frequenz","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAGe,SAASA,EAAYC,GAClC,MAA0BC,mBAAS,CACjCC,UAAMC,EACNC,eAAWD,EACXE,eAAWF,IAHb,mBAAOG,EAAP,KAAcC,EAAd,KAMA,OACE,sBAAKC,UAAU,+BAAf,UACE,oBAAIA,UAAU,gBAAd,8CACA,qBAAIA,UAAU,WAAd,sBACY,IACV,uBACEC,KAAK,OACLC,YAAY,QACZF,UAAU,gCACVG,SAAU,SAACC,GACTL,GAAS,SAACM,GAAD,mBAAC,eAAeA,GAAhB,IAAsBR,UAAWO,EAAEE,OAAOC,cAGvD,uBACEN,KAAK,SACLM,MAAM,YACNP,UAAU,uCACVQ,QAAS,WACPC,QAAQC,IAAIZ,GACZN,EAAMmB,SAAS,CACbV,KAAMW,EAAQC,cACdC,QAAShB,EAAMD,kBAKvB,oBAAIG,UAAU,0BAAd,SACE,qBAAIA,UAAU,gBAAd,UACE,oBAAIA,UAAU,OAAd,qCACA,uBAAMA,UAAU,+CAAhB,UACE,uBACEC,KAAK,OACLC,YAAY,WACZF,UAAU,gCACVG,SAAU,SAACC,GACTL,GAAS,SAACM,GAAD,mBAAC,eAAeA,GAAhB,IAAsBX,KAAMU,EAAEE,OAAOC,cANpD,IAUE,uBACEN,KAAK,OACLC,YAAY,kBACZF,UAAU,gCACVG,SAAU,SAACC,GACTL,GAAS,SAACM,GAAD,mBAAC,eAAeA,GAAhB,IAAsBT,UAAWQ,EAAEE,OAAOC,cAfzD,MAmBE,uBACEN,KAAK,SACLM,MAAM,UACNP,UAAU,uCACVQ,QAAS,WACPC,QAAQC,IAAIZ,GACZN,EAAMmB,SAAS,CACbV,KAAMW,EAAQG,WACdD,QAAS,CACPb,KAAM,aACNP,KAAMI,EAAMJ,KACZE,UAAWE,EAAMF,aAGrBJ,EAAMmB,SAAS,CACbV,KAAMW,EAAQC,cACdC,QAAShB,EAAMD,0B,oBCtElB,SAASmB,EAAexB,GACrC,IAAMyB,EAAYC,IAAO1B,EAAM2B,MAAMC,aAAa,SAACC,GAAD,OAAYA,EAAOC,UAE/DC,EAAYL,MAEfM,OAAO,EAAE,EAAIP,EAAwB,GAAZA,EAAiBA,EAAwB,GAAZA,IACtDQ,MAAM,CAAC,EAAG,MAEPC,EAAiBR,MAEpBM,OAAO,CAACP,EAAwB,GAAZA,GAAkB,EAAIA,EAAwB,GAAZA,IACtDQ,MAAM,CAAC,EAAG,MAEbhB,QAAQC,IAAIO,GAEZ,IAAMU,EAAWT,MAAgBU,MAAML,GACjCM,EAAgBX,MAAcU,MAAMF,GACpCI,EAAMC,iBAAO,MAiBnB,OAfAC,qBAAU,WACRd,IAAa,gBAAgBe,SAE7Bf,IAAU,eACPgB,OAAO,KACPC,KAAK,QAAS,eACdA,KAAK,YAAa,qBAClBC,KAAKT,GACRT,IAAU,eACPgB,OAAO,KACPC,KAAK,QAAS,eACdA,KAAK,YAAa,qBAClBC,KAAKP,KACP,CAACrC,EAAM2B,MAAOU,EAAeF,IAG9B,qBAAK3B,UAAU,mCAAf,SACE,sBAAKA,UAAU,WAAWqC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAAvD,UACG/C,EAAM2B,MAAMC,YAAYoB,KAAI,SAACnB,EAAQoB,GAEpC,OADAhC,QAAQC,IAAIW,EAAOqB,OAEjB,eAACC,EAAA,EAAOC,IAAR,CACEC,QAAS,CAAEC,OAAO,QAClBC,QAAS,CAAED,OAAO,IAAD,OAAMzB,EAAO2B,MAAb,QACjBhD,UAAU,WACVqC,MAAO,CACLC,MAAOf,EAAUF,EAAOC,QAAU,IAClC2B,IAAK,MACLC,KAAM,IACNX,OAAQ,EACRY,gBAAiB9B,EAAOqB,MACxBU,gBAAiB,QAVrB,UAeE,qBACEpD,UAAU,mBACVqC,MAAO,CACLC,MAAO,EACPC,OAAQ,EACRc,UAAW,yBACXC,aAAc,yBACdC,WAAW,cAAD,OAAgBlC,EAAOqB,OACjCc,UAAW,+BAGf,sBACExD,UAAU,8CACVqC,MAAO,CACLmB,UAAU,UAAD,OAAYnC,EAAO2B,MAAnB,QACTN,MAAOrB,EAAOqB,OAJlB,cAOG,8BAAMrB,EAAOoC,cApBXhB,MAyBX,qBAAKiB,GAAG,aAAanB,OAAO,QAAQD,MAAM,QAAQqB,IAAK7B,S,WC/EhD,SAAS8B,EAAqBpE,GAC3C,IAAMyB,EAAYC,IAAO1B,EAAM2B,MAAMC,aAAa,SAACC,GAAD,OAAYA,EAAOC,UAM/DzB,EAAYL,EAAM2B,MAAMtB,UAExBgE,EAAgB3C,MAEnBM,OAAO,EAAE,EAAIP,EAAwB,GAAZA,EAAiBA,EAAwB,GAAZA,IACtDQ,MAAM,CAAC,IAAK,IAETqC,EAAe5C,MAAcU,MAAMiC,GAEnCE,EAAY7C,MAEfM,OAAO,CAAC,EAZQ,MAahBC,MAAM,CAdU,GAcG,MAEhBuC,EAAW9C,MAAgBU,MAAMmC,GAmDvC,OAjDA/B,qBAAU,WACRd,IAAa,kBAAkBe,SAE/Bf,IAAU,iBACPgB,OAAO,KACPC,KAAK,QAAS,iBACdA,KAAK,YAHR,qBAIGC,KAAK4B,GACR9C,IAAU,iBACPgB,OAAO,KACPC,KAAK,QAAS,iBACdA,KAAK,YAHR,oBA1BiB,GA0BjB,SAIGC,KAAK0B,GAZM,oBAcKtE,EAAM2B,MAAMC,aAdjB,yBAcLC,EAdK,QAeN4C,EAAO/C,IAAS,EAhCP,IAgCsB,MAAQsB,KAAI,SAAC0B,GAChD,MAAO,CACLA,EACA7C,EAAOC,OAAS6C,KAAKC,IAAI,EAAID,KAAKE,GAAKxE,EAAYqE,EAAI7C,EAAO2B,WAI5DsB,EAAOpD,MAEVqD,QAAQ,MACRC,GAAE,SAAUC,GACX,OAAOV,EAAUU,EAAE,OAEpBC,GAAE,SAAUD,GACX,OAAOZ,EAAcY,EAAE,OAG3BvD,IAAU,iBACPgB,OAAO,KACPA,OAAO,QACPC,KAAK,IAAKmC,EAAKL,IACf9B,KAAK,SAAUd,EAAOqB,OACtBP,KAAK,OAAQ,QACbA,KAAK,eAAgB,MAxB1B,2BAA6C,IAd/B,iCAwCb,CACD3C,EAAM2B,MACNtB,EACAgE,EACAE,EACAD,EACAE,IAIA,qBAAKhE,UAAU,6BAAf,SACE,qBACE0D,GAAG,eACHpB,MAAOqC,KACPpC,OAzEY,Q,YCchBqC,E,MAAUC,GAAe,CAAEC,MAAO,MAEzBlE,EAAU,CACrBG,WAAY,aACZF,cAAe,gBACfkE,MAAO,SAkEMC,MA/Df,WACE,IAwCA,EAA0BC,sBAxCV,SAAC5E,EAAM6E,GACrB,OAAQA,EAAOjF,MACb,KAAKW,EAAQG,WACX,IACIoE,EADcC,YAAM/E,EAAKe,aAAa,SAACC,GAAD,OAAYA,EAAOoC,UAC5B,EAIjC,GAHI4B,MAAMF,KACRA,EAAe,GAEW,eAAxBD,EAAOpE,QAAQb,KAAuB,CAExC,IAAIP,EAAOwF,EAAOpE,QAAQpB,KACtBE,EAAYsF,EAAOpE,QAAQlB,UAC3B0B,EAAS6C,KAAKmB,KAAK,SAAA5F,EAAQ,GAAR,SAAYE,EAAa,IAC5CoD,EAAQmB,KAAKoB,KAAK3F,EAAYF,GAMlC,OALIA,EAAO,GAAKE,EAAY,EAC1BoD,EAAQmB,KAAKoB,KAAK3F,EAAYF,GAAQ,EAAIyE,KAAKE,GACtC3E,EAAO,IAChBsD,EAAQmB,KAAKoB,KAAK3F,EAAYF,GAAQyE,KAAKE,IAEtC,CACLjD,YAAY,GAAD,mBACNf,EAAKe,aADC,CAET,CACEqC,OAAQ0B,EACRzF,KAAMA,EACNE,UAAWA,EACX0B,OAAQA,EACR0B,MAAOA,EACPN,MAAOkC,EAAQO,GAAcK,UAKrC,MACF,KAAK5E,EAAQC,cACX,OAAO,2BAAKR,GAAZ,IAAkBR,UAAWqF,EAAOpE,UACtC,QACE,OAAOT,KAGiC,CAC5Ce,YAAa,GACbqE,cAAU9F,IAFZ,mBAAOwB,EAAP,KAAcR,EAAd,KAKA,OACE,sBAAKX,UAAU,mCAAf,UACE,iCACE,oBAAIA,UAAU,WAAd,6EAIF,iCACE,cAACT,EAAD,CAAaoB,SAAUA,IACvB,cAACK,EAAD,CAAgBG,MAAOA,EAAOR,SAAUA,IACxC,cAACiD,EAAD,CAAsBzC,MAAOA,EAAOR,SAAUA,OAEhD,qEC3ES+E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e7670235.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ACTIONS } from \"./../App.js\";\r\n\r\nexport default function InputPrompt(props) {\r\n  const [state, setState] = useState({\r\n    real: undefined,\r\n    imaginary: undefined,\r\n    frequency: undefined,\r\n  });\r\n\r\n  return (\r\n    <div className=\"flex flex-col justify-center\">\r\n      <h2 className=\"text-2xl mb-5\">Eingabe von Wechselgrößen:</h2>\r\n      <h3 className=\"text-2xl\">\r\n        Frequenz:{\" \"}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"in Hz\"\r\n          className=\"bg-gray-100 hover:bg-gray-300\"\r\n          onChange={(e) => {\r\n            setState((prev) => ({ ...prev, frequency: e.target.value }));\r\n          }}\r\n        ></input>\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Ändern\"\r\n          className=\"ml-5 bg-green-400 hover:bg-green-600\"\r\n          onClick={() => {\r\n            console.log(state);\r\n            props.dispatch({\r\n              type: ACTIONS.SET_FREQUENCY,\r\n              payload: state.frequency,\r\n            });\r\n          }}\r\n        ></input>\r\n      </h3>\r\n      <ul className=\"flex flex-col list-none\">\r\n        <li className=\"flex flex-col\">\r\n          <h3 className=\"mb-4\">In der Komponentenform:</h3>\r\n          <span className=\"flex w-11/12 text-center justify-center mb-5\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Realteil\"\r\n              className=\"bg-gray-100 hover:bg-gray-300\"\r\n              onChange={(e) => {\r\n                setState((prev) => ({ ...prev, real: e.target.value }));\r\n              }}\r\n            ></input>\r\n            +\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Imaginärteil\"\r\n              className=\"bg-gray-100 hover:bg-gray-300\"\r\n              onChange={(e) => {\r\n                setState((prev) => ({ ...prev, imaginary: e.target.value }));\r\n              }}\r\n            ></input>\r\n            * i\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Eingabe\"\r\n              className=\"ml-5 bg-green-400 hover:bg-green-600\"\r\n              onClick={() => {\r\n                console.log(state);\r\n                props.dispatch({\r\n                  type: ACTIONS.ADD_ZEIGER,\r\n                  payload: {\r\n                    type: \"kartesisch\",\r\n                    real: state.real,\r\n                    imaginary: state.imaginary,\r\n                  },\r\n                });\r\n                props.dispatch({\r\n                  type: ACTIONS.SET_FREQUENCY,\r\n                  payload: state.frequency,\r\n                });\r\n              }}\r\n            ></input>\r\n          </span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport default function Zeigerdiagramm(props) {\r\n  const maxBetrag = d3.max(props.store.zeigerarray, (zeiger) => zeiger.betrag);\r\n\r\n  const scaleReal = d3\r\n    .scaleLinear()\r\n    .domain([-1 * maxBetrag - maxBetrag * 0.1, maxBetrag + maxBetrag * 0.1])\r\n    .range([0, 600]);\r\n\r\n  const scaleImaginary = d3\r\n    .scaleLinear()\r\n    .domain([maxBetrag + maxBetrag * 0.1, -1 * maxBetrag - maxBetrag * 0.1])\r\n    .range([0, 600]);\r\n\r\n  console.log(maxBetrag);\r\n\r\n  const realAxis = d3.axisBottom().scale(scaleReal);\r\n  const imaginaryAxis = d3.axisLeft().scale(scaleImaginary);\r\n  const svg = useRef(null);\r\n\r\n  useEffect(() => {\r\n    d3.selectAll(\".axis-zeiger\").remove();\r\n\r\n    d3.select(\"#zeiger-svg\")\r\n      .append(\"g\")\r\n      .attr(\"class\", \"axis-zeiger\")\r\n      .attr(\"transform\", \"translate(0, 300)\")\r\n      .call(realAxis);\r\n    d3.select(\"#zeiger-svg\")\r\n      .append(\"g\")\r\n      .attr(\"class\", \"axis-zeiger\")\r\n      .attr(\"transform\", \"translate(300, 0)\")\r\n      .call(imaginaryAxis);\r\n  }, [props.store, imaginaryAxis, realAxis]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center mb-20\">\r\n      <div className=\"relative\" style={{ width: 600, height: 600 }}>\r\n        {props.store.zeigerarray.map((zeiger, index) => {\r\n          console.log(zeiger.color);\r\n          return (\r\n            <motion.div\r\n              initial={{ rotate: `0rad` }}\r\n              animate={{ rotate: `-${zeiger.angle}rad` }}\r\n              className=\"absolute\"\r\n              style={{\r\n                width: scaleReal(zeiger.betrag) - 300,\r\n                top: 297.5,\r\n                left: 300,\r\n                height: 5,\r\n                backgroundColor: zeiger.color,\r\n                transformOrigin: \"left\",\r\n                // transform: `rotate(${-zeiger.angle}rad)`,\r\n              }}\r\n              key={index}\r\n            >\r\n              <div\r\n                className=\"absolute right-0\"\r\n                style={{\r\n                  width: 0,\r\n                  height: 0,\r\n                  borderTop: \"15px solid transparent\",\r\n                  borderBottom: \"15px solid transparent\",\r\n                  borderLeft: `25px solid ${zeiger.color}`,\r\n                  transform: \"translate(3.5px, -12.5px)\",\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"absolute right-0 -top-14 font-bold text-2xl\"\r\n                style={{\r\n                  transform: `rotate(${zeiger.angle}rad)`,\r\n                  color: zeiger.color,\r\n                }}\r\n              >\r\n                U<sub>{zeiger.nummer}</sub>\r\n              </div>\r\n            </motion.div>\r\n          );\r\n        })}\r\n        <svg id=\"zeiger-svg\" height=\"600px\" width=\"600px\" ref={svg}></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport default function SpannungZeitdiagramm(props) {\r\n  const maxBetrag = d3.max(props.store.zeigerarray, (zeiger) => zeiger.betrag);\r\n\r\n  const svgWidth = 1000;\r\n  const svgHeight = 600;\r\n  const svgPadding = 50;\r\n  const viewedTime = 0.02;\r\n  const frequency = props.store.frequency; // in ms\r\n\r\n  const scaleSpannung = d3\r\n    .scaleLinear()\r\n    .domain([-1 * maxBetrag - maxBetrag * 0.1, maxBetrag + maxBetrag * 0.1])\r\n    .range([600, 0]);\r\n\r\n  const spannungAxis = d3.axisLeft().scale(scaleSpannung);\r\n\r\n  const scaleTime = d3\r\n    .scaleLinear()\r\n    .domain([0, viewedTime])\r\n    .range([svgPadding, 1000]);\r\n\r\n  const timeAxis = d3.axisBottom().scale(scaleTime);\r\n\r\n  useEffect(() => {\r\n    d3.selectAll(\".axis-spannung\").remove();\r\n\r\n    d3.select(\"#spannung-svg\")\r\n      .append(\"g\")\r\n      .attr(\"class\", \"axis-spannung\")\r\n      .attr(\"transform\", `translate(0, 300)`)\r\n      .call(timeAxis);\r\n    d3.select(\"#spannung-svg\")\r\n      .append(\"g\")\r\n      .attr(\"class\", \"axis-spannung\")\r\n      .attr(\"transform\", `translate(${svgPadding}, 0)`)\r\n      .call(spannungAxis);\r\n\r\n    for (let zeiger of props.store.zeigerarray) {\r\n      const sine = d3.range(0, viewedTime, 0.0001).map((t) => {\r\n        return [\r\n          t,\r\n          zeiger.betrag * Math.sin(2 * Math.PI * frequency * t + zeiger.angle),\r\n        ];\r\n      });\r\n\r\n      const line = d3\r\n        .line()\r\n        .context(null)\r\n        .x(function (d) {\r\n          return scaleTime(d[0]);\r\n        })\r\n        .y(function (d) {\r\n          return scaleSpannung(d[1]);\r\n        });\r\n\r\n      d3.select(\"#spannung-svg\")\r\n        .append(\"g\")\r\n        .append(\"path\")\r\n        .attr(\"d\", line(sine))\r\n        .attr(\"stroke\", zeiger.color)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke-width\", \"5\");\r\n    }\r\n  }, [\r\n    props.store,\r\n    frequency,\r\n    scaleSpannung,\r\n    scaleTime,\r\n    spannungAxis,\r\n    timeAxis,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center\">\r\n      <svg\r\n        id=\"spannung-svg\"\r\n        width={svgWidth + svgPadding}\r\n        height={svgHeight}\r\n      ></svg>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useReducer } from \"react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport InputPrompt from \"./components/inputPrompt\";\nimport Zeigerdiagramm from \"./components/zeigerdiagramm\";\nimport SpannungZeitdiagramm from \"./components/spannung-zeitdiagramm\";\nimport { max as d3max } from \"d3\";\nimport distinctColors from \"distinct-colors\";\n\n// const COLORARRAY = [\n//   \"#0652DD\",\n//   \"#1289A7\",\n//   \"#A3CB38\",\n//   \"#F79F1F\",\n//   \"#9980FA\",\n//   \"#EA2027\",\n//   \"#6F1E51\",\n//   \"#006266\",\n//   \"#009432\",\n// ];\n\nvar palette = distinctColors({ count: 100 });\n\nexport const ACTIONS = {\n  ADD_ZEIGER: \"add-zeiger\",\n  SET_FREQUENCY: \"set-frequency\",\n  RESET: \"reset\",\n};\n\nfunction App() {\n  const reducer = (prev, action) => {\n    switch (action.type) {\n      case ACTIONS.ADD_ZEIGER:\n        let zeigernrMax = d3max(prev.zeigerarray, (zeiger) => zeiger.nummer);\n        let zeigernummer = zeigernrMax + 1;\n        if (isNaN(zeigernummer)) {\n          zeigernummer = 0;\n        }\n        if (action.payload.type === \"kartesisch\") {\n          // console.log(prev.zeigerarray);\n          let real = action.payload.real;\n          let imaginary = action.payload.imaginary;\n          let betrag = Math.sqrt(real ** 2 + imaginary ** 2);\n          let angle = Math.atan(imaginary / real);\n          if (real > 0 && imaginary < 0) {\n            angle = Math.atan(imaginary / real) + 2 * Math.PI;\n          } else if (real < 0) {\n            angle = Math.atan(imaginary / real) + Math.PI;\n          }\n          return {\n            zeigerarray: [\n              ...prev.zeigerarray,\n              {\n                nummer: zeigernummer,\n                real: real,\n                imaginary: imaginary,\n                betrag: betrag,\n                angle: angle,\n                color: palette[zeigernummer].hex(),\n              },\n            ],\n          };\n        }\n        break;\n      case ACTIONS.SET_FREQUENCY:\n        return { ...prev, frequency: action.payload };\n      default:\n        return prev;\n    }\n  };\n  const [store, dispatch] = useReducer(reducer, {\n    zeigerarray: [],\n    frequenz: undefined,\n  });\n\n  return (\n    <div className=\"App flex flex-col justify-center\">\n      <header>\n        <h1 className=\"text-3xl\">\n          Addition frequenzgleicher Wechselgrößen - Visualisierer\n        </h1>\n      </header>\n      <main>\n        <InputPrompt dispatch={dispatch} />\n        <Zeigerdiagramm store={store} dispatch={dispatch} />\n        <SpannungZeitdiagramm store={store} dispatch={dispatch} />\n      </main>\n      <footer>©2021 by Julian Szigethy</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}